name: Android Build & Sign APK

on:
  push:
    branches:
      - main  # 修改为你的目标分支

jobs:
  build:
    name: Build and Sign APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Generate Keystore File
        run: |
          KEYSTORE_PASSWORD="pakeplus"
          KEY_PASSWORD="pakeplus"
          KEY_ALIAS="pakeplus"

          echo "Generating keystore..."
          keytool -genkeypair -v -keystore keystore.jks \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass "$KEYSTORE_PASSWORD" \
            -keypass "$KEY_PASSWORD" \
            -alias "$KEY_ALIAS" \
            -dname "CN=MyApp, OU=Dev, O=Company, L=City, ST=State, C=Country"

          echo "Converting keystore to base64..."
          base64 keystore.jks > keystore.jks.b64
          cat keystore.jks.b64

          echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
          echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV
          echo "KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
          echo "KEYSTORE_BASE64=$(cat keystore.jks.b64)" >> $GITHUB_ENV

      - name: Decode Keystore File
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > keystore.jks

      - name: Grant execute permissions to Gradle
        run: chmod +x gradlew

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Find unsigned APK
        id: find_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "*-unsigned.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "❌ No unsigned APK found!"
            exit 1
          fi
          echo "FOUND_APK=$APK_PATH" >> $GITHUB_ENV
          echo "✅ Found unsigned APK: $APK_PATH"

      - name: Sign APK using apksigner
        run: |
          BUILD_TOOLS_DIR=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1)
          APKSIGNER="$ANDROID_HOME/build-tools/$BUILD_TOOLS_DIR/apksigner"

          SIGNED_APK="${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk"

          $APKSIGNER sign \
            --ks keystore.jks \
            --ks-pass pass:$KEYSTORE_PASSWORD \
            --key-pass pass:$KEY_PASSWORD \
            --ks-key-alias $KEY_ALIAS \
            --out "$SIGNED_APK" \
            "$FOUND_APK"

      - name: Verify APK Signature
        run: |
          BUILD_TOOLS_DIR=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1)
          APKSIGNER="$ANDROID_HOME/build-tools/$BUILD_TOOLS_DIR/apksigner"

          if [ ! -f "${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "❌ Signed APK not found!"
            exit 1
          fi

          echo "Verifying signed APK..."
          $APKSIGNER verify --verbose "${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk"
          echo "✅ APK verification successful"

      - name: Optimize APK using zipalign
        run: |
          BUILD_TOOLS_DIR=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1)
          ZIPALIGN="$ANDROID_HOME/build-tools/$BUILD_TOOLS_DIR/zipalign"

          if [ ! -f "${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "❌ Signed APK not found for zipalign!"
            exit 1
          fi

          echo "Running zipalign..."
          $ZIPALIGN -v 4 \
            "${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk" \
            "${{ github.workspace }}/app/build/outputs/apk/release/app-release-aligned.apk"

          mv "${{ github.workspace }}/app/build/outputs/apk/release/app-release-aligned.apk" \
             "${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk"

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: signed-apk
          path: app/build/outputs/apk/release/app-release.apk
